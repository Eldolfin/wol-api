/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/cache/cache/images/{filename}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["images"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/agent": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["agent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/list": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/list_ws": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["list_ws"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/ssh/{name}/connect": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["connect"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/{name}/open_application/{application_name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["open_application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/{name}/open_vdi": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["open_vdi"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/{name}/shutdown": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["shutdown"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/{name}/task": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["task"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/machine/{name}/wake": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["wake"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AgentComunicationError:
      | "NotConnected"
      | {
          SendFailed: string;
        };
    /** @description Application data for the web */
    ApplicationDisplay: {
      /** @example /api/cache/images/steam_icon_526870.png */
      icon: string;
      /** @example Satisfactory */
      name: string;
    };
    GroupedApplication: {
      groups: {
        [key: string]: components["schemas"]["ApplicationDisplay"][];
      };
    };
    ListMachineResponse: {
      machines: components["schemas"]["MachineInfos"][];
    };
    MachineCfg: {
      /** @example 192.168.1.4 */
      ip: string;
      /** @example f4:93:9f:eb:56:a8 */
      mac: string;
      tasks?: components["schemas"]["TaskCfg"][];
    };
    MachineInfos: {
      applications?: null | components["schemas"]["GroupedApplication"];
      config: components["schemas"]["MachineCfg"];
      /** @example computer1 */
      name: string;
      state: components["schemas"]["State"];
      tasks: components["schemas"]["Task"][];
      vdi_opened: boolean;
    };
    OpenVdiError:
      | {
          AgentComunicationError: components["schemas"]["AgentComunicationError"];
        }
      | "AlreadyOpened";
    /** @description Json message sent by the client's terminal */
    SshClientMessage: {
      message: components["schemas"]["SshClientMessageType"];
    };
    SshClientMessageType:
      | {
          /** @description The client changed the size of the terminal */
          change_size: [number, number];
        }
      | {
          /** @description The client typed something in the terminal */
          input: string;
        };
    SshServerMessage: {
      message: components["schemas"]["SshServerMessageType"];
    };
    SshServerMessageType: {
      error: string;
    };
    /**
     * @example on
     * @enum {string}
     */
    State: "unknown" | "on" | "off" | "pending_on" | "pending_off";
    Task: {
      id: number;
    };
    TaskCfg: {
      /** @example ["echo", "hello", "world"] */
      command: string[];
      /** @example https://www.pngkit.com/png/full/638-6381661_satisfactory-logo-full-color-square-number.png */
      icon_url: string;
      /** @example Say hello world */
      name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  images: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Filename provided in the config */
        filename: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Image data */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  agent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Switching protocol to websocket */
      101: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List machines successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListMachineResponse"];
        };
      };
    };
  };
  list_ws: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Switching protocol to websocket */
      101: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListMachineResponse"];
        };
      };
    };
  };
  connect: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of the machine to wake */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Switch to websocket and transfer terminal data */
      101: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  open_application: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of the machine */
        name: string;
        /** @description Name of the application */
        application_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Application opened successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  open_vdi: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of the machine on which to open the vdi */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Opened the vdi successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Machine does not exist */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Failed to open vdi */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OpenVdiError"];
        };
      };
    };
  };
  shutdown: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of the machine to shutdown */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Shutdown the machine successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Machine does not exist */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  task: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of the machine to run the task on */
        name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Task"];
      };
    };
    responses: {
      /** @description Task added to the queue successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  wake: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of the machine to wake */
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Woke the machine successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Machine does not exist */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
